// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Backbone.EditView = (function(_super) {
  __extends(EditView, _super);

  function EditView() {
    this.editing = __bind(this.editing, this);
    this.editInPlace = __bind(this.editInPlace, this);
    this.getEditable = __bind(this.getEditable, this);
    return EditView.__super__.constructor.apply(this, arguments);
  }

  EditView.prototype.events = {
    "click .edit_in_place": "editInPlace",
    "focusout .editing": "editing",
    "keyup    .editing": "editing",
    "keydown  .editing": "editing",
    "change   select": "onSelect"
  };

  EditView.prototype.onSelect = function(event) {
    var $target, key, model, modelId, newObject, value;
    $target = $(event.target);
    if ($target.attr("data-EditView") !== "true") {
      return;
    }
    modelId = $target.attr('data-model-id');
    model = this.models.get(modelId);
    key = $target.attr('data-key');
    value = $target.val();
    newObject = {};
    newObject[key] = value;
    return model.save(newObject);
  };

  EditView.prototype.getEditable = function(model, prop, name, defaultValue, prep) {
    var htmlFunction;
    if (name == null) {
      name = "Value";
    }
    if (defaultValue == null) {
      defaultValue = "none";
    }
    if (this.preps == null) {
      this.preps = {};
    }
    if (this.preps[model.id] == null) {
      this.preps[model.id] = {};
    }
    this.preps[model.id][prop.key] = prep;
    if (this.htmlGenCatelog == null) {
      this.htmlGenCatelog = {};
    }
    if (this.htmlGenCatelog[model.id] == null) {
      this.htmlGenCatelog[model.id] = {};
    }
    this.htmlGenCatelog[model.id][prop.key] = htmlFunction = (function(model, prop, name, defaultValue) {
      return function() {
        var alreadyFound, choice, editOrNot, escape, isArray, key, numberOrNot, optionsHtml, promptSelect, result, selected, type, uid, untitled, value, _i, _len, _ref;
        key = prop.key;
        escape = prop.escape;
        type = prop.type || '';
        value = model.has(key) ? model.get(key) : defaultValue;
        if (value === '') {
          value = defaultValue;
        }
        if (escape) {
          value = _(value).escape();
        }
        if (value === defaultValue) {
          untitled = " data-untitled='true' ";
        }
        editOrNot = prop.editable ? "class='edit_in_place'" : "";
        numberOrNot = _.isNumber(value) ? "data-is-number='true'" : "data-is-number='false'";
        if (prop.isArray) {
          isArray = "data-is-array='true'";
        }
        if (prop.choices != null) {
          uid = Math.floor(Math.random() * 1e20).toString(16);
          optionsHtml = '';
          alreadyFound = false;
          _ref = prop.choices;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            choice = _ref[_i];
            if (value === choice.value && !alreadyFound) {
              alreadyFound = true;
              selected = "selected='selected'";
            } else {
              selected = "";
            }
            optionsHtml += "<option value='" + choice.value + "' " + selected + ">" + choice.label + "</option>";
          }
          if (!alreadyFound) {
            promptSelect = "selected='selected'";
          }
          optionsHtml = ("<option disabled='disabled' " + (promptSelect || '') + ">Please select</option>") + optionsHtml;
          result = "<select data-EditView='true' data-model-id='" + model.id + "' data-key='" + key + "'>" + optionsHtml + "</select>";
        } else {
          result = "<div class='edit_in_place " + key + "-edit-in-place' id='" + model.id + "-" + key + "'><span data-model-id='" + model.id + "' data-type='" + type + "' data-key='" + key + "' data-value='" + value + "' data-name='" + name + "' " + editOrNot + " " + numberOrNot + " " + (isArray || '') + " " + (untitled || '') + ">" + value + "</span></div>";
        }
        return result;
      };
    })(model, prop, name, defaultValue);
    return htmlFunction();
  };

  EditView.prototype.editInPlace = function(event) {
    var $parent, $span, $target, $textarea, classes, isArray, isNumber, key, margins, model, modelId, name, oldValue, rows, transferVariables, type, uid;
    if (this.alreadyEditing) {
      return;
    }
    this.alreadyEditing = true;
    $span = $(event.target);
    if ($span[0].tagName === "DIV") {
      $span = $span.find("span");
    }
    $parent = $span.parent();
    if ($span.hasClass("editing")) {
      return;
    }
    uid = Math.floor(Math.random() * 1e20).toString(16);
    key = $span.attr("data-key");
    name = $span.attr("data-name");
    type = $span.attr("data-type");
    isNumber = $span.attr("data-is-number") === "true";
    isArray = $span.attr("data-is-array") === "true";
    console.log(this.models);
    modelId = $span.attr("data-model-id");
    model = this.models.get(modelId);
    oldValue = model.get(key) || "";
    if ($span.attr("data-untitled") === "true") {
      oldValue = "";
    }
    $target = $(event.target);
    classes = ($target.attr("class") || "").replace("settings", "");
    margins = $target.css("margin");
    transferVariables = "data-is-number='" + isNumber + "' data-is-array='" + isArray + "' data-key='" + key + "' data-model-id='" + modelId + "' ";
    rows = parseInt(Math.max(String(oldValue.length) / 30, 1));
    $parent.html("<textarea placeholder='" + name + "' id='" + uid + "' rows='" + rows + "' " + transferVariables + " class='editing " + classes + " " + key + "-editing' style='margin:" + margins + "' data-name='" + name + "'>" + oldValue + "</textarea>");
    $textarea = $("#" + uid);
    return $textarea.select();
  };

  EditView.prototype.editing = function(event) {
    var $parent, $target, altKey, attributes, e, enter, isArray, isNumber, key, keyDown, model, modelId, name, newValue, oldValue, _base, _base1, _ref, _ref1;
    if (event.which === 13 && event.type === "keyup") {
      return false;
    }
    $target = $(event.target);
    $parent = $target.parent();
    key = $target.attr("data-key");
    isNumber = $target.attr("data-is-number") === "true";
    isArray = $target.attr("data-is-array") === "true";
    modelId = $target.attr("data-model-id");
    name = $target.attr("data-name");
    model = this.models.get(modelId);
    oldValue = model.get(key);
    newValue = $target.val();
    newValue = isNumber ? parseInt(newValue) : newValue;
    newValue = isArray ? newValue.toLowerCase().replace(/[^a-z0-9, ]/, '').split(/\s?,\s?/) : newValue;
    if (event.which === 27 || event.type === "focusout") {
      this.$el.find("#" + modelId + "-" + key).html(typeof (_base = this.htmlGenCatelog[modelId])[key] === "function" ? _base[key]() : void 0);
      this.alreadyEditing = false;
      return;
    }
    keyDown = event.type === "keydown";
    enter = event.which === 13;
    altKey = event.altKey;
    if (enter && altKey) {
      return true;
    }
    if (!(enter && keyDown)) {
      return true;
    }
    this.alreadyEditing = false;
    if (String(newValue) !== String(oldValue)) {
      attributes = {};
      attributes[key] = newValue;
      if (((_ref = this.preps) != null ? (_ref1 = _ref[modelId]) != null ? _ref1[key] : void 0 : void 0) != null) {
        try {
          attributes[key + "-cooked"] = this.preps[modelId][key](newValue);
        } catch (_error) {
          e = _error;
          console.error("Problem cooking value<br>" + e.message);
          return;
        }
      }
      model.save(attributes, {
        success: (function(_this) {
          return function() {
            var _base1;
            model.trigger("status", "" + name + " saved");
            return _this.$el.find("#" + modelId + "-" + key).html(typeof (_base1 = _this.htmlGenCatelog[modelId])[key] === "function" ? _base1[key]() : void 0);
          };
        })(this),
        error: (function(_this) {
          return function() {
            alert("Please try to save again, it didn't work that time.");
            return _this.render();
          };
        })(this)
      });
    } else {
      this.$el.find("#" + modelId + "-" + key).html(typeof (_base1 = this.htmlGenCatelog[modelId])[key] === "function" ? _base1[key]() : void 0);
    }
    return false;
  };

  return EditView;

})(Backbone.View);
